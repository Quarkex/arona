#!/usr/bin/env ruby
################################################################################
#                                                                              #
#  CGI fetcher script                                                          #
#                                                                              #
#  Expects a JSON body by POST method, and the following parameters:           #
#                                                                              #
#  - collection (required)                                                     #
#    The mongo collection in which to perform the query                        #
#                                                                              #
#  - language                                                                  #
#    Defaults to 'en'. Filters results by the chosen language                  #
#                                                                              #
#  - values                                                                    #
#    Defaults to *all*. The requested data from the chosen elements. If the    #
#    elements doesn't have that property, it will be null in the anwser        #
#                                                                              #
#  - offset                                                                    #
#    Defaults to 0. Used for pagination, skips that ammount of elements        #
#                                                                              #
#  - limit                                                                     #
#    Defaults to 4. The ammount of elements to send back. 0 means all elements #
#                                                                              #
#  The script anwsers with an array of objects containing the requested        #
#  values, or nil if the requested collection doesn't exist.                   #
#                                                                              #
#  If something goes wrong, the output array will contain an object with an    #
#  error value containing the error message.                                   #
#                                                                              #
################################################################################

require 'cgi'
require 'json'
require 'mongo'

$config = {}

# Default config values
$config["mongo-ip"]   = "127.0.0.1"
$config["mongo-port"] = 27017
$config["mongo-db"]   = "arona"

configFile = File.expand_path(File.dirname(__FILE__)) + '/../config.json'
load configFile if File.file? configFile

Mongo::Logger.logger.level = ::Logger::FATAL

client = Mongo::Client.new([ $config['mongo-ip'] + ':' + $config['mongo-port'].to_s ], :database => $config['mongo-db'])
db = client.database

cgi = CGI.new
output = []
sts = { size: 0, last_modified: nil }
begin

    # CGI tries to parse the request body as form parameters so a
    # blob of JSON awkwardly ends up as the one and only parameter key.
    parameters = JSON.parse(cgi.params.keys.first)
    if parameters.has_key?("collection") then
        collection = client[parameters['collection']]
        collection.indexes.create_one( { :date => -1 }, unique: false )
        resources = client['recursos']

        if parameters.has_key? 'filters'  then filters = parameters['filters']  else filters = {}    end
        if parameters.has_key? 'language' then lang    = parameters['language'] else lang    = "en"  end
        if parameters.has_key? 'values'   then values  = parameters['values']   else values  = []    end
        if parameters.has_key? 'offset'   then offset  = parameters['offset']   else offset  = 0     end
        if parameters.has_key? 'limit'    then limit   = parameters['limit']    else limit   = 4     end
        if parameters.has_key? 'stats'    then stats   = parameters['stats']    else stats   = false end

        filters["IDIOMA"] = lang

        doc = collection.find( filters )
        sts["size"] = doc.count()

        doc = doc.sort({"F_INICIO_PUB": -1})
        doc = doc.skip(offset) if not offset == 0
        doc = doc.limit(limit) if not limit == 0

        doc.each do | document |
            if values == [] then
                output.push(document)
            else
                item = {}
                values.each do | value |
                    item[value] = nil
                    case value

                    when "INDICADORES"
                        if document.keys.include?('CODIGOSINDICADORES')\
                        && document.keys.include?('VALORESINDICADORESLISTA')\
                        && document.keys.include?('ETIQUETAINDICADORES')\
                        && document.keys.include?('VALORESINDICADORES')\
                        then
                            def slugify( string )
                                string = string.to_s.downcase
                                string.gsub!(/[ ]+/, "_")
                                string.gsub!(/á/, 'a')
                                string.gsub!(/é/, 'e')
                                string.gsub!(/í/, 'i')
                                string.gsub!(/ó/, 'o')
                                string.gsub!(/ú/, 'u')
                                string.gsub!(/ñ/, 'n')
                                string
                            end

                            def buildIndicators( doc )
                                indicadores = {}
                                codigosindicadores      = doc["CODIGOSINDICADORES"]     == nil ? '' : doc["CODIGOSINDICADORES"]
                                etiquetaindicadores     = doc["ETIQUETAINDICADORES"]    == nil ? '' : doc["ETIQUETAINDICADORES"]
                                valoresindicadoreslista = doc["VALORESINDICADORESLISTA"]== nil ? '' : doc["VALORESINDICADORESLISTA"]
                                valoresindicadores      = doc["VALORESINDICADORES"]     == nil ? '' : doc["VALORESINDICADORES"]

                                codigosindicadores      = codigosindicadores.split('&')      if not codigosindicadores.kind_of?(Array)
                                etiquetaindicadores     = etiquetaindicadores.split('&')     if not etiquetaindicadores.kind_of?(Array)
                                valoresindicadoreslista = valoresindicadoreslista.split('&') if not valoresindicadoreslista.kind_of?(Array)
                                valoresindicadores      = valoresindicadores.split('&')      if not valoresindicadores.kind_of?(Array)

                                if codigosindicadores != nil and etiquetaindicadores != nil then
                                    etiquetaindicadores.each_with_index do | key, j |
                                        indicadores[slugify key] = {"code": codigosindicadores[j], "contents": [] } if indicadores != nil
                                    end
                                    if valoresindicadores != nil and valoresindicadoreslista != nil then
                                        valoresindicadores.each_with_index do | valor, j |
                                            key = slugify etiquetaindicadores[j]
                                            label = slugify valoresindicadoreslista[j]
                                            indicador = {"code": valor.to_i, "label": label }
                                            indicadores[key][:contents].push(indicador) if indicadores[key] != nil
                                        end
                                    end
                                else
                                    indicadores = nil
                                end
                                indicadores
                            end

                            item[value] = buildIndicators document
                        else
                            item[value] = nil
                        end

                    when "WEBCAM"
                        #FIXME this should be dinamic
                        if document['CODCONTENIDO'] == 22539 then
                            item[value] = '<iframe src="http://www.skylinewebcams.com/webcam/espana/canarias/santa-cruz-de-tenerife/playa-las-vistas.html?w=339" width="800" height="500" frameborder="0" scrolling="no" marginwidth="0" marginheight="0"></iframe>'
                        else
                            item[value] = '<img alt="Webcam placeholder" src="img/placeholders/webcam.png">'
                        end

                    when "MAPA"
                        address = ""
                        chunks = [ "TIPO_VIA", "NOMBRE_VIA", "NUMERO", "BLOQUE", "PORTAL", "ESCALERA", "PLANTA", "PUERTA", "LOCAL", "CODIGO_POSTAL", "ZONA" ]

                        chunks.each do | chunk |
                            if document.has_key? chunk and document[chunk] != nil then
                                address = address + ",+" if not address == "" unless chunk == "CODIGO_POSTAL" or chunk == "NOMBRE_VIA"
                                address = address + "+"  if chunk == "NOMBRE_VIA" or chunk == "CODIGO_POSTAL" unless address == ""
                                address = address + document[chunk].to_s.gsub(' ', '+')
                                #address = CGI::escape address
                            end
                        end

                        item[value] = "https://www.google.es/maps/place/" + address if address != ""

                    when "MAPA_IFRAME"
                        address = ""
                        chunks = [ "TIPO_VIA", "NOMBRE_VIA", "NUMERO", "BLOQUE", "PORTAL", "ESCALERA", "PLANTA", "PUERTA", "LOCAL", "CODIGO_POSTAL" ]

                        chunks.each do | chunk |
                            if document.has_key? chunk and document[chunk] != nil then
                                address = address + ",+" if not address == "" unless chunk == "CODIGO_POSTAL" or chunk == "NOMBRE_VIA"
                                address = address + "+"  if chunk == "NOMBRE_VIA" or chunk == "CODIGO_POSTAL" unless address == ""
                                address = address + document[chunk].to_s.gsub(' ', '+')
                                #address = CGI::escape address
                            end
                        end

                        api_key = "AIzaSyCZgh8qgEhKEsZNchyy3bBjIXoZxWHPlH0"
                        map = "https://www.google.com/maps/embed/v1/place?key=" + api_key + "&q=" + address

                        item[value] = '<iframe width="600" height="450" frameborder="0" style="border:0" src="' + map + '" allowfullscreen></iframe>' if address != ""

                    when "DIRECCION"
                        address = ""
                        chunks = [ "TIPO_VIA", "NOMBRE_VIA", "NUMERO", "BLOQUE", "PORTAL", "ESCALERA", "PLANTA", "PUERTA", "LOCAL", "CODIGO_POSTAL", "ZONA" ]

                        chunks.each do | chunk |
                            if document.has_key? chunk and document[chunk] != nil then
                                chunk = chunk.to_s
                                address = address + ", " if not address == "" unless chunk == "CODIGO_POSTAL" or chunk == "NOMBRE_VIA"
                                address = address + " "  if chunk == "NOMBRE_VIA" unless address == ""
                                address = address + ". " if chunk == "CODIGO_POSTAL" unless address == ""
                                address = address + document[chunk].to_s
                            end
                        end

                        item[value] = address if address != ""

                    when "IMAGEN", "DOCUMENTO"
                        if document.has_key? value then
                            resource = resources.find({ "IDIOMA": "es", "CODRECURSO": document[value] }).sort("RECURSO" => -1).first
                            resource = resources.find({ "CODRECURSO": document[value] }).sort("RECURSO" => -1).first if resource == nil
                            item[value] = resource == nil ? nil : resource["RECURSO"]
                        end

                    when  "F_INICIO_PUB", "F_FIN_PUB", "F_INICIO", "F_FIN"
                        item[value] = document[value] if document[value] != "9999-99-99T99:99:99Z"

                    else
                        item[value] = document[value] if document.has_key? value

                    end
                end
                output.push(item)
            end
        end

    else
        output = [ nil ]
    end
rescue Exception => e
    output.push({"error": e.message, "parameters": parameters, "backtrace": e.backtrace })
end
output.push( sts ) if stats
cgi.out("documentType=application/json; charset=utf-8"){ output.to_json }
