#!/usr/bin/env ruby
################################################################################
#                                                                              #
#  CGI fetcher script                                                          #
#                                                                              #
#  Expects a JSON body by POST method, and the following parameters:           #
#                                                                              #
#  - collection (required)                                                     #
#    The mongo collection in which to perform the query                        #
#                                                                              #
#  - language                                                                  #
#    Defaults to 'en'. Filters results by the chosen language                  #
#                                                                              #
#  - values                                                                    #
#    Defaults to *all*. The requested data from the chosen elements. If the    #
#    elements doesn't have that property, it will be null in the anwser        #
#                                                                              #
#  - offset                                                                    #
#    Defaults to 0. Used for pagination, skips that ammount of elements        #
#                                                                              #
#  - limit                                                                     #
#    Defaults to 4. The ammount of elements to send back. 0 means all elements #
#                                                                              #
#  The script anwsers with an array of objects containing the requested        #
#  values, or nil if the requested collection doesn't exist.                   #
#                                                                              #
#  If something goes wrong, the output array will contain an object with an    #
#  error value containing the error message.                                   #
#                                                                              #
################################################################################

require 'cgi'
require 'json'
require 'date'

cgi = CGI.new
output = []
$parameters = cgi.params.keys.first.to_s
DEBUG_JSON_STRING = '{"language":"es","offset":0,"limit":10,"filters":{"published":true,"$and":[{"$or":[{"CODCONTENIDO":1},{"CODRECURSO":1},{"id":1},{"ID":1}]}]},"values":["name","address","published","slider","year","m2_built","m2_terrain","m2_balcony","building_floors","building_status","restroom","price","kitchen","bedrooms","parking","views","livingroom","tel_or_wifi","id","type","energy_cert","image","image_paths"],"collection":"rooms","stats":true,"values_list":["name","id","image_path","excerpt"],"values_view":["name","address","published","slider","year","m2_built","m2_terrain","m2_balcony","building_floors","building_status","restroom","price","kitchen","bedrooms","parking","views","livingroom","tel_or_wifi","id","type","energy_cert","image_path","image_paths"],"pub":false}'

begin
    require 'mongo'

    $pwd = File.expand_path(File.dirname(__FILE__))
    load $pwd + '/../config.rb'
    config($pwd + '/../config.json')

    Mongo::Logger.logger.level = ::Logger::FATAL

    client = Mongo::Client.new([ $config['mongo_ip'] + ':' + $config['mongo_port'].to_s ], :database => $config['mongo_db'])
    $db = client.database

    sts = { size: 0, last_modified: nil }

    # CGI tries to parse the request body as form parameters so a
    # blob of JSON awkwardly ends up as the one and only parameter key.
    $parameters = JSON.parse($parameters == '' ? DEBUG_JSON_STRING : $parameters)

    def fix_regex (object)
        object.keys.each do | key |
            case true
            when (object[key].is_a? String)
                if object[key].match /^regexp\(.*\)$/ then
                    object[key].gsub!(/^regexp\(\/(.*)\/\)$/, '\1')
                    object[key] = Regexp.new(object[key])
                end
            when (object[key].is_a? Hash)
                fix_regex(object[key])
            when (object[key].is_a? Array)
                object[key].each do | item |
                    fix_regex(item)
                end
            end
        end if object.respond_to?(:keys)
    end

    fix_regex($parameters)

    if $parameters.has_key?("collection") then
        $collection = client[$parameters['collection']]
        $collection.indexes.create_one( { $config["date_field"]      => -1 }, unique: false )
        $collection.indexes.create_one( { $config["id_field"]        => -1 }, unique: false )
        $collection.indexes.create_one( { $config["timestamp_field"] =>  1 }, unique: false )

        text_filter_object = {}
        $config["text_fields"].each do | field |
            text_filter_object[field] = 'text'
        end

        $collection.indexes.create_one( text_filter_object, unique: false, name: $parameters['collection']+'_text_index', language_override: $config["language_field"] )

        $resources = client[$config["resource_collection"]]
        $resources.indexes.create_one( { $config["resource_id_field"] => -1 }, unique: false )
        $resources.indexes.create_one( { $config["resource_field"]    => -1 }, unique: false )

        if $parameters.has_key? 'filters'  then filters = $parameters['filters']  else filters = {}                                end
        if $parameters.has_key? 'language' then lang    = $parameters['language'] else lang    = $config["page_language"]          end
        if $parameters.has_key? 'values'   then values  = $parameters['values']   else values  = []                                end
        if $parameters.has_key? 'offset'   then offset  = $parameters['offset']   else offset  = 0                                 end
        if $parameters.has_key? 'limit'    then limit   = $parameters['limit']    else limit   = $config["default_resource_limit"] end
        if $parameters.has_key? 'stats'    then stats   = $parameters['stats']    else stats   = false                             end
        if $parameters.has_key? 'pub'      then pub     = $parameters['pub']      else pub     = true                              end

        filters[$config["language_field"]]   = lang if lang != ''
        filters[$config["start_date_field"]] = {'$lt': DateTime.now } if pub
        filters[$config["end_date_field"]]   = {'$gte': DateTime.now } if pub

        if values != [] then
            projection = {"_id"=> 1, $config["timestamp_field"] => 1}
            values.each do |value|
                projection[value] = 1
            end
        else
            projection = []
        end

        doc = $collection.find( filters )
        sts["size"] = doc.count()

        doc = doc.sort({$config['date_field'] => -1})
        doc = doc.skip(offset) if not offset == 0
        doc = doc.limit(limit) if not limit == 0
        doc = doc.projection(projection) if not projection.empty?

        last_modified = doc.sort({$config["timestamp_field"] => 1}).first()
        if last_modified != nil then
            sts["last_modified"] = last_modified[$config["timestamp_field"]].iso8601 unless last_modified[$config["timestamp_field"]] == nil
        end

        doc = doc.to_a

        modules = {}
        if values != [] then
            values.each do | value |
                module_file = File.dirname(__FILE__) + '/fetch_custom_values/' + value + '.rb'
                modules[value] = module_file if File.exist? (module_file)
            end
        else
            Dir.glob(File.dirname(__FILE__) + '/fetch_custom_values/*.rb') do | module_file |
                value = File.basename(module_file, File.extname(module_file))
                modules[value] = module_file if File.exist? (module_file)
            end
        end

        doc.each do | document |
            @doc = $collection.find({"_id": document["_id"]}).first
            document.delete("_id")
            modules.each do | value, file |
                @value = value
                @custom_value = nil
                load file
                document[@value] = @custom_value
            end
        end
        output += doc

    else
        output = [ nil ]
    end
rescue Exception => e
    output.push({"error": e.message, "parameters": $parameters, "backtrace": e.backtrace })
end
output.push( sts ) if stats
cgi.out("documentType=application/json; charset=utf-8"){ output.to_json }
