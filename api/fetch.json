#!/usr/bin/env ruby
################################################################################
#                                                                              #
#  CGI fetcher script                                                          #
#                                                                              #
#  Expects a JSON body by POST method, and the following parameters:           #
#                                                                              #
#  - collection (required)                                                     #
#    The mongo collection in which to perform the query                        #
#                                                                              #
#  - language                                                                  #
#    Defaults to 'en'. Filters results by the chosen language                  #
#                                                                              #
#  - values                                                                    #
#    Defaults to *all*. The requested data from the chosen elements. If the    #
#    elements doesn't have that property, it will be null in the anwser        #
#                                                                              #
#  - offset                                                                    #
#    Defaults to 0. Used for pagination, skips that ammount of elements        #
#                                                                              #
#  - limit                                                                     #
#    Defaults to 4. The ammount of elements to send back. 0 means all elements #
#                                                                              #
#  The script anwsers with an array of objects containing the requested        #
#  values, or nil if the requested collection doesn't exist.                   #
#                                                                              #
#  If something goes wrong, the output array will contain an object with an    #
#  error value containing the error message.                                   #
#                                                                              #
################################################################################

require 'cgi'
require 'json'
require 'mongo'
require 'date'

$config = {}

# Default config values
$config["mongo-ip"]   = "127.0.0.1"
$config["mongo-port"] = 27017
$config["mongo-db"]   = "arona"

configFile = File.expand_path(File.dirname(__FILE__)) + '/../config.json'
load configFile if File.file? configFile

Mongo::Logger.logger.level = ::Logger::FATAL

client = Mongo::Client.new([ $config['mongo-ip'] + ':' + $config['mongo-port'].to_s ], :database => $config['mongo-db'])
db = client.database

cgi = CGI.new
output = []
sts = { size: 0, last_modified: nil }
begin

    # CGI tries to parse the request body as form parameters so a
    # blob of JSON awkwardly ends up as the one and only parameter key.
    $parameters = JSON.parse(cgi.params.keys.first)
    if $parameters.has_key?("collection") then
        $collection = client[$parameters['collection']]
        $collection.indexes.create_one( { :date => -1 }, unique: false )
        $resources = client['recursos']

        if $parameters.has_key? 'filters'  then filters = $parameters['filters']  else filters = {}    end
        if $parameters.has_key? 'language' then lang    = $parameters['language'] else lang    = "en"  end
        if $parameters.has_key? 'values'   then values  = $parameters['values']   else values  = []    end
        if $parameters.has_key? 'offset'   then offset  = $parameters['offset']   else offset  = 0     end
        if $parameters.has_key? 'limit'    then limit   = $parameters['limit']    else limit   = 4     end
        if $parameters.has_key? 'stats'    then stats   = $parameters['stats']    else stats   = false end

        filters["IDIOMA"] = lang

        doc = $collection.find( filters )
        #sts["size"] = doc.count()

        doc = doc.sort({"F_INICIO_PUB": -1})
        #doc = doc.skip(offset) if not offset == 0
        #doc = doc.limit(limit) if not limit == 0

        def should_add( document )
            output = true
            date_constraints = ["F_INICIO_PUB", "F_FIN_PUB"]
            date_constraints.each do | date_tag |
                if document.has_key?(date_tag) then
                    def param_date date
                        DateTime.iso8601(date)
                    rescue ArgumentError
                        nil
                    end
                    constraint = param_date document[date_tag]
                    if constraint != nil then
                        case date_tag

                        when "F_INICIO_PUB"
                            output = false if DateTime.now < constraint

                        when "F_FIN_PUB"
                            output = false if DateTime.now > constraint

                        end
                    end
                end
            end
            output
        end

        $skipped_elements = 0
        doc.each do | document |
            @doc = document
            if values == [] then
                if $skipped_elements >= offset then
                    output.push(document)
                else
                    $skipped_elements += 1
                end unless not should_add(document) == true
            else
                item = {}
                values.each do | value |
                    @value = value
                    item[@value] = nil
                    module_file = File.dirname(__FILE__) + '/fetch_custom_values/' + @value + '.rb'
                    if File.exist? (module_file) then
                        @custom_value = nil
                        load module_file
                        item[@value] = @custom_value
                    else
                        item[@value] = document[@value] if document.has_key? @value
                    end
                end
                if $skipped_elements >= offset then
                    output.push(item)
                else
                    $skipped_elements += 1
                end unless not should_add(document) == true
            end
        end
        sts["size"] = output.count()
        output = output.take(limit) unless limit == 0

    else
        output = [ nil ]
    end
rescue Exception => e
    output.push({"error": e.message, "parameters": $parameters, "backtrace": e.backtrace })
end
output.push( sts ) if stats
cgi.out("documentType=application/json; charset=utf-8"){ output.to_json }
